apply plugin: 'maven-publish'
apply plugin: 'signing'

Properties properties = new Properties()
if (project.rootProject.file('local.properties').exists()) {
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
}
project.ext {
    artifactoryRepo = version.toString().endsWith('-SNAPSHOT') ?
            "https://oss.sonatype.org/content/repositories/snapshots/" :
            "https://oss.sonatype.org/service/local/staging/deploy/maven2"
}

//project.ext."signing.keyId"=properties.getProperty("signing.keyId")
//project.ext."signing.password"=properties.getProperty("signing.password")
//project.ext."signing.secretKeyRingFile"=properties.getProperty("signing.secretKeyRingFile")
project.ext."signing.gnupg.keyName"=properties.getProperty("signing.gnupg.keyName")
project.ext."signing.gnupg.optionsFile"=properties.getProperty("signing.gnupg.optionsFile")
project.ext."signing.gnupg.homeDir"=properties.getProperty("signing.gnupg.homeDir")

publishing {
    repositories {
        maven {
            url artifactoryRepo
            credentials {
                username properties.getProperty("sonatype.username")
                password properties.getProperty("sonatype.password")
            }
        }
    }
}

signing {
    required {
        // signing is required if this is a release version and the artifacts are to be published
        !version.toString().endsWith('-SNAPSHOT') && tasks.withType(PublishToMavenRepository).find {
            gradle.taskGraph.hasTask it
        }
    }
    def signingKeyId = properties.getProperty("GPG_KEY_ID")
    def signingKey = properties.getProperty("GPG_PRIVATE_KEY") //System.getenv("GPG_PRIVATE_KEY")
    def signingPassword = properties.getProperty("GPG_PASSPHRASE") //System.getenv("GPG_PASSPHRASE")
    useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
    sign publishing.publications.aar
}
